// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "pvz_controller/internal/model"
	repository "pvz_controller/internal/pkg/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPVZRepo is a mock of PVZRepo interface.
type MockPVZRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPVZRepoMockRecorder
}

// MockPVZRepoMockRecorder is the mock recorder for MockPVZRepo.
type MockPVZRepoMockRecorder struct {
	mock *MockPVZRepo
}

// NewMockPVZRepo creates a new mock instance.
func NewMockPVZRepo(ctrl *gomock.Controller) *MockPVZRepo {
	mock := &MockPVZRepo{ctrl: ctrl}
	mock.recorder = &MockPVZRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZRepo) EXPECT() *MockPVZRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPVZRepo) Add(ctx context.Context, point *model.Pickups) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, point)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPVZRepoMockRecorder) Add(ctx, point interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPVZRepo)(nil).Add), ctx, point)
}

// DeleteByID mocks base method.
func (m *MockPVZRepo) DeleteByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockPVZRepoMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockPVZRepo)(nil).DeleteByID), ctx, id)
}

// GetByID mocks base method.
func (m *MockPVZRepo) GetByID(ctx context.Context, id int64) (repository.PvzDb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(repository.PvzDb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPVZRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPVZRepo)(nil).GetByID), ctx, id)
}

// ListAll mocks base method.
func (m *MockPVZRepo) ListAll(ctx context.Context) ([]repository.PvzDb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]repository.PvzDb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockPVZRepoMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockPVZRepo)(nil).ListAll), ctx)
}

// Update mocks base method.
func (m *MockPVZRepo) Update(ctx context.Context, point *model.Pickups, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, point, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPVZRepoMockRecorder) Update(ctx, point, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPVZRepo)(nil).Update), ctx, point, id)
}

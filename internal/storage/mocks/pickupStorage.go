// Code generated by MockGen. DO NOT EDIT.
// Source: ./pickupStorage.go

// Package mock_pickupStorage is a generated GoMock package.
package mock_pickupStorage

import (
	model "pvz_controller/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBops is a mock of DBops interface.
type MockDBops struct {
	ctrl     *gomock.Controller
	recorder *MockDBopsMockRecorder
}

// MockDBopsMockRecorder is the mock recorder for MockDBops.
type MockDBopsMockRecorder struct {
	mock *MockDBops
}

// NewMockDBops creates a new mock instance.
func NewMockDBops(ctrl *gomock.Controller) *MockDBops {
	mock := &MockDBops{ctrl: ctrl}
	mock.recorder = &MockDBopsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBops) EXPECT() *MockDBopsMockRecorder {
	return m.recorder
}

// ReadPVZ mocks base method.
func (m *MockDBops) ReadPVZ() ([]model.Pickups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPVZ")
	ret0, _ := ret[0].([]model.Pickups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPVZ indicates an expected call of ReadPVZ.
func (mr *MockDBopsMockRecorder) ReadPVZ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPVZ", reflect.TypeOf((*MockDBops)(nil).ReadPVZ))
}

// WritePVZ mocks base method.
func (m *MockDBops) WritePVZ(pvz model.Pickups) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePVZ", pvz)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePVZ indicates an expected call of WritePVZ.
func (mr *MockDBopsMockRecorder) WritePVZ(pvz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePVZ", reflect.TypeOf((*MockDBops)(nil).WritePVZ), pvz)
}
